{"name": "Widget Markets", "description": "", "created": "2022-06-28T20:11:24.000Z", "created_by": "verainternal_aabutler", "modified": "2023-02-16T15:08:15.000Z", "modified_by": "verainternal_aabutler", "tags": "", "guid": "c9d4869c-7965-4cd6-9d5d-05bdc58ff624", "org_id": "afa8dbc8-8040-439d-8ac6-7299dcfc0ffa", "business_unit": null, "compliance_status": "OUT_OF_COMPLIANCE", "last_scan_date": "2024-04-26T17:45:11.000Z", "compliance_overview": {"not_passing_policy": 4, "passing_policy": 0, "conditionally_passing_policy": 0, "not_assessed": 1, "total_items": 5, "total_ignored": 0}, "custom_fields": [{"name": "Custom 1", "value": ""}, {"name": "Custom 2", "value": ""}, {"name": "Custom 3", "value": ""}, {"name": "Custom 4", "value": ""}, {"name": "Custom 5", "value": ""}, {"name": "Custom 6", "value": ""}, {"name": "Custom 7", "value": ""}, {"name": "Custom 8", "value": ""}, {"name": "Custom 9", "value": ""}, {"name": "Custom 10", "value": ""}], "asset_infos": [{"guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "type": "APPLICATION", "name": "Verademo", "attributes": {"app_url": "HomeAppProfile:90250:1367805", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2024-04-23T15:21:37.000Z", "scan_url": "DynamicParamsView:90250:1367805:35282781:35251574::35267224", "scan_type": "DYNAMIC"}, {"status": "PUBLISHED", "modified_date": "2022-03-25T17:49:54.000Z", "scan_url": "ManualParamsView:90250:1367805:17489771:17462014:::17477664", "scan_type": "MANUAL"}, {"status": "PUBLISHED", "modified_date": "2024-03-08T19:37:14.000Z", "scan_url": "StaticOverview:90250:1367805:33657073:33626540:33642190", "scan_type": "STATIC"}], "created": "2022-03-03T14:17:53.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "ccdc9751-3057-44b4-b8f0-a1712cf17edd", "name": "OWASP Top 10", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2024-04-23T15:21:37.000Z", "policy_passed_scan_requirements": true, "is_ignored": false}}, {"guid": "5d690c8f-d696-48b8-a2f9-0056d8b05c8c", "type": "APPLICATION", "name": "verademo-java-gcp", "attributes": {"app_url": "HomeAppProfile:90250:1461267", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [], "created": "2022-06-16T18:59:27.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "4cbdbf17-7979-4848-bd7f-f5c0e1b67d18", "name": "Veracode Recommended High + SCA", "policy_compliance_status": "NOT_ASSESSED"}], "last_completed_scan_date": null, "policy_passed_scan_requirements": false, "is_ignored": false}}, {"guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "type": "APPLICATION", "name": "Verademo.NET", "attributes": {"app_url": "HomeAppProfile:90250:1394124", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2024-04-26T17:45:11.000Z", "scan_url": "StaticOverview:90250:1394124:35444429:35413146:35428796", "scan_type": "STATIC"}, {"status": "PUBLISHED", "modified_date": "2022-12-07T21:35:04.000Z", "scan_url": "DynamicParamsView:90250:1394124:22619331:22590622::22606272", "scan_type": "DYNAMIC"}], "created": "2022-03-29T16:55:35.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2024-04-26T17:45:11.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}, {"guid": "7d954dc6-fbc3-43da-8572-31c9dc5c0b98", "type": "APPLICATION", "name": "Vulnerable_Tornado_App", "attributes": {"app_url": "HomeAppProfile:90250:1414756", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-04-19T17:52:18.000Z", "scan_url": "StaticOverview:90250:1414756:17952623:17924826:17940476", "scan_type": "STATIC"}], "created": "2022-04-19T17:28:29.000Z", "policy_in_grace_period": true, "policy_passed_rules": true, "policies": [{"guid": "9f47093a-0493-4ab4-bce4-3246eb2ab50f", "name": "Veracode Recommended Medium + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-04-19T17:52:18.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}, {"guid": "df376eb3-a039-40db-8d24-1c11da1bfd42", "type": "APPLICATION", "name": "OpenSSL", "attributes": {"app_url": "HomeAppProfile:90250:1509220", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-08-16T17:49:49.000Z", "scan_url": "StaticOverview:90250:1509220:20235769:20207605:20223255", "scan_type": "STATIC"}], "created": "2022-08-16T13:14:48.000Z", "policy_in_grace_period": true, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-08-16T17:49:49.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}], "total_assets": 5, "total_ignored_assets": 0, "team_accessible": true, "restricted": false, "_links": {"self": {"href": "https://api.veracode.com/appsec/v1/collections/c9d4869c-7965-4cd6-9d5d-05bdc58ff624"}}, "findings_list": {"0dae4e5d-2744-4191-9e52-22eaec684310": {"findings_by_severity": {"sev5": 4, "sev4": 16, "sev3": 78, "sev2": 4, "sev1": 0, "sev0": 0}, "app_findings": [{"issue_id": 49, "scan_type": "STATIC", "description": "<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "CLOSED", "resolution": "MITIGATED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "APPROVED", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 27, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "com.veracode.verademo.controller.ToolsController.ping", "exploitability": 0, "attack_vector": "java.lang.Runtime.exec", "file_line_number": 56}, "annotations": [{"comment": "Because of ABC", "action": "APPROVED", "created": "2023-09-05T19:24:42.950Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-242 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:27.251Z", "user_name": "Aaron Butler"}, {"comment": "By xyz", "action": "APPDESIGN", "created": "2022-05-13T14:37:09.121Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-62 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:14.445Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 115, "scan_type": "STATIC", "description": "<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 46, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "com.veracode.verademo.controller.ToolsController.ping", "exploitability": 0, "attack_vector": "java.lang.Runtime.exec", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-243 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:28.689Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-63 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:15.176Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 118, "scan_type": "STATIC", "description": "<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 52, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "com.veracode.verademo.controller.ToolsController.fortune", "exploitability": 0, "attack_vector": "java.lang.Runtime.exec", "file_line_number": 88}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-4 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:42:53.271Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-244 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:29.427Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-64 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:16.050Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 73, "scan_type": "STATIC", "description": "<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variable cmd. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "PROPOSED", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 58, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "com.veracode.verademo.controller.ToolsController.fortune", "exploitability": 0, "attack_vector": "java.lang.Runtime.exec", "file_line_number": 91}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-245 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:30.455Z", "user_name": "Aaron Butler"}, {"comment": "controlled by ABC", "action": "FP", "created": "2022-06-28T20:22:02.447Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-65 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:16.977Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 45, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 19, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 169}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-14 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:17.390Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-254 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:37.727Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-74 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:23.857Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 55, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 38, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 255}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-15 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:19.496Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-255 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:38.583Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-75 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:24.419Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 354, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 58, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showTotp", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 298}, "build_id": 33657073}, {"issue_id": 355, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 43, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processTotp", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 340}, "build_id": 33657073}, {"issue_id": 129, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 57, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processRegister", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 416}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-16 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:22.132Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-256 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:39.501Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-76 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:25.143Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 101, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 64, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processRegisterFinish", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 485}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-17 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:24.511Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-257 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:40.394Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-77 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:26.069Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 97, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 40, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 589}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-18 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:26.997Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-258 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:41.620Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-78 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:27.149Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 51, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 53, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 0, "attack_vector": "java.sql.PreparedStatement.executeQuery", "file_line_number": 601}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-19 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:29.326Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-259 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:41.992Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-79 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:27.828Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 134, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 37, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.BlabController.showBlabbers", "exploitability": 0, "attack_vector": "java.sql.PreparedStatement.executeQuery", "file_line_number": 490}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-6 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:42:57.911Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-246 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:31.007Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-66 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:17.632Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 46, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 40, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-11 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:10.184Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-251 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:35.191Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-71 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:21.194Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 66, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 75, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 47}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-12 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:12.576Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-252 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:36.081Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-72 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:22.264Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 155, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 51}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-13 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:14.639Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-253 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:36.812Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-73 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:23.173Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 50, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 44, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-9 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:05.722Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-249 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:33.811Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-69 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:19.908Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 120, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 47}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-10 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:07.929Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-250 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:34.558Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-70 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:20.680Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 132, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 44, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-7 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:00.568Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-247 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:32.151Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-67 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:18.501Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 53, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 47}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-8 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:03.324Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-248 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:33.018Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-68 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:19.140Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 15, "scan_type": "STATIC", "description": "<span>The serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types.  Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.</span> <span>Avoid passing untrusted data; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 502, "name": "Deserialization of Untrusted Data", "href": "https://api.veracode.com/appsec/v1/cwes/502"}, "file_path": "com/veracode/verademo/utils/UserFactory.java", "file_name": "UserFactory.java", "module": "verademo.war", "relative_location": 74, "finding_category": {"id": 22, "name": "Encapsulation", "href": "https://api.veracode.com/appsec/v1/categories/22"}, "procedure": "com.veracode.verademo.utils.UserFactory.createFromRequest", "exploitability": 0, "attack_vector": "java.io.ObjectInput.readObject", "file_line_number": 44}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-103 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:20.152Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 99, "scan_type": "STATIC", "description": "<span>This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "file_path": "com/veracode/verademo/utils/User.java", "file_name": "User.java", "module": "verademo.war", "relative_location": 19, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.utils.User.md5", "exploitability": 1, "attack_vector": "java.security.MessageDigest.getInstance", "file_line_number": 107}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-101 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:16.007Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 131, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD initializer</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "com/veracode/verademo/utils/Constants.java", "file_name": "Constants.java", "module": "verademo.war", "relative_location": -1, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "UNKNOWN", "exploitability": 1, "attack_vector": "JDBC_PASSWORD initializer", "file_line_number": 1}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-63 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:47.977Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 78, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "com/veracode/verademo/utils/Constants.java", "file_name": "Constants.java", "module": "verademo.war", "relative_location": 12, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.utils.Constants.!ctor", "exploitability": 1, "attack_vector": "JDBC_PASSWORD", "file_line_number": 18}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-64 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:49.937Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 59, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 88, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 119}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-50 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:18.148Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 359, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 2, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 142}, "build_id": 33657073}, {"issue_id": 360, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 18, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 168}, "build_id": 33657073}, {"issue_id": 92, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 22, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 176}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-31 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:34.725Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 361, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 33, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 187}, "build_id": 33657073}, {"issue_id": 362, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 192}, "build_id": 33657073}, {"issue_id": 135, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 234}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-51 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:20.645Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 363, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 8, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 241}, "build_id": 33657073}, {"issue_id": 74, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 31, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 253}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-53 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:25.209Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 44, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable formatString. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 58, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 259}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-54 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:27.405Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 36, "scan_type": "STATIC", "description": "<span>This call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 85, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 0, "attack_vector": "showPasswordHint", "file_line_number": 260}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-99 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:11.375Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 60, "scan_type": "STATIC", "description": "<span>This call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 93, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 0, "attack_vector": "showPasswordHint", "file_line_number": 265}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-100 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:13.433Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 364, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 21, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showTotp", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 286}, "build_id": 33657073}, {"issue_id": 373, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 47, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showTotp", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 296}, "build_id": 33657073}, {"issue_id": 374, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. totpSecret</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 85, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.UserController.showTotp", "exploitability": 1, "attack_vector": "totpSecret", "file_line_number": 304}, "build_id": 33657073}, {"issue_id": 375, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 17, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processTotp", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 327}, "build_id": 33657073}, {"issue_id": 376, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 36, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processTotp", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 338}, "build_id": 33657073}, {"issue_id": 84, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 66, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processRegisterFinish", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 486}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-55 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:29.776Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 93, "scan_type": "STATIC", "description": "<span>This call to javax.mail.Message.setSubject() contains a CRLF injection flaw.  Writing untrusted input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Sanitize CRLF sequences from untrusted input.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/93.html\">CWE</a> <a href=\"https://owasp.org/www-community/vulnerabilities/CRLF_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 93, "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/93"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 68, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.emailUser", "exploitability": 1, "attack_vector": "javax.mail.Message.setSubject", "file_line_number": 529}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-30 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:32.074Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 79, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 37, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 587}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-56 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:31.990Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 142, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 50, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 599}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-57 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:34.623Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 2, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variable cookie. The tainted data originated from earlier calls to javax.servlet.http.HttpServletRequest.getCookies, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 63, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processProfile", "exploitability": 1, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 718}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-32 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:37.055Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 6, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 87, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 745}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-58 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:37.041Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 13, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 26, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 779}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-59 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:39.127Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 7, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 43, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 793}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-60 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:41.245Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 100, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.ServletResponse.setContentType() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 44, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 0, "attack_vector": "javax.servlet.ServletResponse.setContentType", "file_line_number": 796}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-33 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:39.367Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 114, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 53, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.setHeader", "file_line_number": 798}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-34 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:41.473Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 62, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.usernameExists", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 879}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-61 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:43.424Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 16, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 41, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.updateUsername", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 935}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-62 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:45.824Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 89, "scan_type": "STATIC", "description": "<span>This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 21, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.controller.UserController.md5", "exploitability": 1, "attack_vector": "java.security.MessageDigest.getInstance", "file_line_number": 1029}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-102 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:17.994Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 353, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 379, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 366, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 381, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 388, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 365, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 391, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 347, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 346, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 352, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 378, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 383, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 385, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 377, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 356, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 343, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 387, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 342, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 382, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 348, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 386, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 390, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 349, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 345, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 389, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 380, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 357, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 384, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 344, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-02-28T20:53:00.780Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": true, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 38}, "build_id": 33657073}, {"issue_id": 96, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.debug() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 10, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.debug", "file_line_number": 107}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-46 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:09.047Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 117, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.debug() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 32, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.debug", "file_line_number": 131}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-47 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:11.259Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 91, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.debug() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 45, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.debug", "file_line_number": 158}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-48 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:13.621Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 106, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.debug() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to debug() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 62, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.debug", "file_line_number": 192}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-49 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:15.890Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 63, "scan_type": "STATIC", "description": "<span>This call to getMoreFeed() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.verademo.controller.BlabController.getMoreFeed", "exploitability": 0, "attack_vector": "getMoreFeed", "file_line_number": 204}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-74 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:11.906Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 151, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable blabbersSql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 28, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.showBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 486}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-36 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:46.060Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 70, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 24, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 558}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-37 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:48.719Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 20, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 31, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 559}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-38 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:51.025Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 141, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 35, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 39}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-43 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:02.544Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 71, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 72, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 46}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-44 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:04.666Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 88, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 90, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 50}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-45 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:06.845Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 12, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 39}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-41 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:57.759Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 122, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 89, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 46}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-42 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:00.261Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 19, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 39}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-39 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:53.246Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 121, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 89, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 46}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-40 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:55.554Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 5, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. </span> <span>Set the Secure attribute for all cookies used by HTTPS sessions.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE</a> <a href=\"https://owasp.org/www-community/controls/SecureCookieAttribute\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 2, "cwe": {"id": 614, "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "href": "https://api.veracode.com/appsec/v1/cwes/614"}, "file_path": "com/veracode/verademo/utils/UserFactory.java", "file_name": "UserFactory.java", "module": "verademo.war", "relative_location": 90, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.utils.UserFactory.updateInResponse", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 96}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-114 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:44.943Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 41, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. </span> <span>Set the Secure attribute for all cookies used by HTTPS sessions.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE</a> <a href=\"https://owasp.org/www-community/controls/SecureCookieAttribute\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 2, "cwe": {"id": 614, "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "href": "https://api.veracode.com/appsec/v1/cwes/614"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 22, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 176}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-112 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:40.100Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 48, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. </span> <span>Set the Secure attribute for all cookies used by HTTPS sessions.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE</a> <a href=\"https://owasp.org/www-community/controls/SecureCookieAttribute\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 2, "cwe": {"id": 614, "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "href": "https://api.veracode.com/appsec/v1/cwes/614"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 63, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.controller.UserController.processProfile", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 718}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-113 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:42.531Z", "user_name": "Aaron Butler"}], "build_id": 33657073}, {"issue_id": 98, "scan_type": "STATIC", "description": "<span> The application calls the javax.mail.Transport.send() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to send() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from earlier calls to java.lang.NullPointerException.getMessage, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-03-08T19:37:14.479Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.verademo.controller.UserController.emailExceptionsToAdmin", "exploitability": 0, "attack_vector": "javax.mail.Transport.send", "file_line_number": 1019}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-122 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:06:02.691Z", "user_name": "Aaron Butler"}], "build_id": 33657073}], "asset_info": {"guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "type": "APPLICATION", "name": "Verademo", "attributes": {"app_url": "HomeAppProfile:90250:1367805", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2024-04-23T15:21:37.000Z", "scan_url": "DynamicParamsView:90250:1367805:35282781:35251574::35267224", "scan_type": "DYNAMIC"}, {"status": "PUBLISHED", "modified_date": "2022-03-25T17:49:54.000Z", "scan_url": "ManualParamsView:90250:1367805:17489771:17462014:::17477664", "scan_type": "MANUAL"}, {"status": "PUBLISHED", "modified_date": "2024-03-08T19:37:14.000Z", "scan_url": "StaticOverview:90250:1367805:33657073:33626540:33642190", "scan_type": "STATIC"}], "created": "2022-03-03T14:17:53.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "ccdc9751-3057-44b4-b8f0-a1712cf17edd", "name": "OWASP Top 10", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2024-04-23T15:21:37.000Z", "policy_passed_scan_requirements": true, "is_ignored": false}}}, "5d690c8f-d696-48b8-a2f9-0056d8b05c8c": {"findings_by_severity": {"sev5": 0, "sev4": 0, "sev3": 0, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [], "asset_info": {"guid": "5d690c8f-d696-48b8-a2f9-0056d8b05c8c", "type": "APPLICATION", "name": "verademo-java-gcp", "attributes": {"app_url": "HomeAppProfile:90250:1461267", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [], "created": "2022-06-16T18:59:27.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "4cbdbf17-7979-4848-bd7f-f5c0e1b67d18", "name": "Veracode Recommended High + SCA", "policy_compliance_status": "NOT_ASSESSED"}], "last_completed_scan_date": null, "policy_passed_scan_requirements": false, "is_ignored": false}}}, "e88f93c6-afb9-44e4-a002-a4df820d73f7": {"findings_by_severity": {"sev5": 0, "sev4": 1, "sev3": 19, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [{"issue_id": 82, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on the command object, which contains tainted data. </span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "PROPOSED", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "a/1/s/verademo-dotnet/controllers/homecontroller.cs", "file_name": "homecontroller.cs", "module": "verademo-dotnet.dll", "relative_location": 64, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.HomeController.Index", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteReader", "file_line_number": 39}, "annotations": [{"comment": "Network controlled", "action": "NETENV", "created": "2023-06-30T16:39:23.364Z", "user_name": "Aaron Butler"}], "build_id": 35444429}, {"issue_id": 79, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponse.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Request().get_QueryString().get_Item(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "a/1/s/verademo-dotnet/xssinjection.aspx.cs", "file_name": "xssinjection.aspx.cs", "module": "verademo-dotnet.dll", "relative_location": 53, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.XssInjection.Page_Load", "exploitability": 2, "attack_vector": "system_web_dll.System.Web.HttpResponse.Write", "file_line_number": 16}, "build_id": 35444429}, {"issue_id": 81, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.get_Request().get_QueryString().get_Item(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "file_path": "a/1/s/verademo-dotnet/openredirect.aspx.cs", "file_name": "openredirect.aspx.cs", "module": "verademo-dotnet.dll", "relative_location": 38, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.FormOpenRedirect.Page_Load", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponse.Redirect", "file_line_number": 20}, "build_id": 35444429}, {"issue_id": 80, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable UrlEncode(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "file_path": "a/1/s/verademo-dotnet/openredirect.aspx.cs", "file_name": "openredirect.aspx.cs", "module": "verademo-dotnet.dll", "relative_location": 66, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.FormOpenRedirect.Page_Load", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponse.Redirect", "file_line_number": 23}, "build_id": 35444429}, {"issue_id": 84, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponse.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data from the variable this.MyCustomCleanser(). The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequest.get_QueryString.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "file_path": "a/1/s/verademo-dotnet/openredirect.aspx.cs", "file_name": "openredirect.aspx.cs", "module": "verademo-dotnet.dll", "relative_location": 95, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.FormOpenRedirect.Page_Load", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponse.Redirect", "file_line_number": 26}, "build_id": 35444429}, {"issue_id": 85, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. hardcodedpasswdset password</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "a/1/s/verademo-dotnet/controllers/homecontroller.cs", "file_name": "homecontroller.cs", "module": "verademo-dotnet.dll", "relative_location": 4, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.HomeController.Index", "exploitability": 1, "attack_vector": "hardcodedpasswdset", "file_line_number": 17}, "build_id": 35444429}, {"issue_id": 86, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.File.Delete() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to Delete() contains tainted data from the variable filePath. The tainted data originated from earlier calls to verademo_2Ddotnet_dll.VirtualController.vc_mvcentry, and verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.HomeController.Index.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 73, "name": "External Control of File Name or Path", "href": "https://api.veracode.com/appsec/v1/cwes/73"}, "file_path": "a/1/s/verademo-dotnet/controllers/homecontroller.cs", "file_name": "homecontroller.cs", "module": "verademo-dotnet.dll", "relative_location": 90, "finding_category": {"id": 1, "name": "Directory Traversal", "href": "https://api.veracode.com/appsec/v1/categories/1"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.HomeController.Index", "exploitability": 0, "attack_vector": "mscorlib_dll.System.IO.File.Delete", "file_line_number": 50}, "build_id": 35444429}, {"issue_id": 83, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.File.OpenText() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to OpenText() contains tainted data from the variable filePath. The tainted data originated from earlier calls to verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.DefaultController.Index, and verademo_2Ddotnet_dll.VirtualController.vc_mvcentry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 73, "name": "External Control of File Name or Path", "href": "https://api.veracode.com/appsec/v1/cwes/73"}, "file_path": "a/1/s/verademo-dotnet/controllers/defaultcontroller.cs", "file_name": "defaultcontroller.cs", "module": "verademo-dotnet.dll", "relative_location": 11, "finding_category": {"id": 1, "name": "Directory Traversal", "href": "https://api.veracode.com/appsec/v1/categories/1"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.DefaultController.Index", "exploitability": 0, "attack_vector": "mscorlib_dll.System.IO.File.OpenText", "file_line_number": 23}, "build_id": 35444429}, {"issue_id": 87, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to verademo_2Ddotnet_dll.VirtualController.vc_mvcentry, and verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.DefaultController.Index.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "a/1/s/verademo-dotnet/controllers/defaultcontroller.cs", "file_name": "defaultcontroller.cs", "module": "verademo-dotnet.dll", "relative_location": 77, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademo_2Ddotnet_dll.Verademo_dotnet.Controllers.DefaultController.Index", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 28}, "build_id": 35444429}, {"issue_id": 71, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.FileInfo.OpenRead() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. OpenRead() was called on an object, which contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.HttpRequestBase.get_PathInfo.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 73, "name": "External Control of File Name or Path", "href": "https://api.veracode.com/appsec/v1/cwes/73"}, "module": "system.web.optimization.dll", "relative_location": 91, "finding_category": {"id": 1, "name": "Directory Traversal", "href": "https://api.veracode.com/appsec/v1/categories/1"}, "procedure": "system_web_optimization_dll.System.Web.Optimization.FileVirtualPathProvider.FileInfoVirtualFile.Open", "exploitability": 0, "attack_vector": "mscorlib_dll.System.IO.FileInfo.OpenRead", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 135, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "module": "log4net.dll", "relative_location": 24, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "log4net_dll.log4net.Util.PatternStringConverters.RandomStringPatternConverter.Convert", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 118, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.TextWriter.WriteLine() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteLine() contains tainted data. The tainted data originated from earlier calls to system_dll.System.Net.WebResponse.GetResponseStream, and system_dll.System.Net.WebRequest.GetResponse.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "module": "log4net.dll", "relative_location": 26, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "log4net_dll.log4net.Util.LogLog.EmitOutLine", "exploitability": 2, "attack_vector": "mscorlib_dll.System.IO.TextWriter.WriteLine", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 119, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.TextWriter.WriteLine() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to WriteLine() contains tainted data. The tainted data originated from earlier calls to system_dll.System.Net.WebResponse.GetResponseStream, system_dll.System.Net.WebRequest.GetResponse, system_web_dll.System.Web.HttpRequest.get_Params, and system_dll.System.Net.Dns.GetHostName.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "module": "log4net.dll", "relative_location": 26, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "log4net_dll.log4net.Util.LogLog.EmitErrorLine", "exploitability": 2, "attack_vector": "mscorlib_dll.System.IO.TextWriter.WriteLine", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 165, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponseBase.RedirectPermanent() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to RedirectPermanent() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.Routing.RouteCollection.GetVirtualPath.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "module": "system.web.mvc.dll", "relative_location": 82, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "system_web_mvc_dll.System.Web.Mvc.RedirectToRouteResult.ExecuteResult", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponseBase.RedirectPermanent", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 166, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponseBase.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data. The tainted data originated from an earlier call to system_web_dll.System.Web.Routing.RouteCollection.GetVirtualPath.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "module": "system.web.mvc.dll", "relative_location": 95, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "system_web_mvc_dll.System.Web.Mvc.RedirectToRouteResult.ExecuteResult", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponseBase.Redirect", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 167, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponseBase.RedirectPermanent() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to RedirectPermanent() contains tainted data. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequestBase.get_RawUrl, and system_web_dll.System.Web.HttpRequestBase.get_Url.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "module": "system.web.mvc.dll", "relative_location": 77, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "system_web_mvc_dll.System.Web.Mvc.RedirectResult.ExecuteResult", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponseBase.RedirectPermanent", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 168, "scan_type": "STATIC", "description": "<span>This call to system_web_dll.System.Web.HttpResponseBase.Redirect() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to Redirect() contains tainted data. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequestBase.get_RawUrl, and system_web_dll.System.Web.HttpRequestBase.get_Url.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "module": "system.web.mvc.dll", "relative_location": 94, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "system_web_mvc_dll.System.Web.Mvc.RedirectResult.ExecuteResult", "exploitability": 1, "attack_vector": "system_web_dll.System.Web.HttpResponseBase.Redirect", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 169, "scan_type": "STATIC", "description": "<span>This call to system_web_mvc_dll.System.Web.Mvc.RedirectResult.!newinit_0_1() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The first argument to !newinit_0_1() contains tainted data. The tainted data originated from earlier calls to system_web_dll.System.Web.HttpRequestBase.get_RawUrl, and system_web_dll.System.Web.HttpRequestBase.get_Url.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "module": "system.web.mvc.dll", "relative_location": 94, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "system_web_mvc_dll.System.Web.Mvc.RequireHttpsAttribute.HandleNonHttpsRequest", "exploitability": 1, "attack_vector": "system_web_mvc_dll.System.Web.Mvc.RedirectResult.!newinit_0_1", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 173, "scan_type": "STATIC", "description": "<span>This function uses the mscorlib_dll.System.Security.Cryptography.MD5.Create() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "module": "webgrease.dll", "relative_location": 23, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "webgrease_dll.Microsoft.Ajax.Utilities.ScriptSharpSourceMap.EndPackage", "exploitability": 1, "attack_vector": "mscorlib_dll.System.Security.Cryptography.MD5.Create", "file_line_number": 1}, "build_id": 35444429}, {"issue_id": 177, "scan_type": "STATIC", "description": "<span>This function uses the mscorlib_dll.System.Security.Cryptography.MD5CryptoServiceProvider.!newinit_0_0() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-08-15T18:33:41.656Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-04-26T17:45:10.859Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "module": "webgrease.dll", "relative_location": 83, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "webgrease_dll.WebGrease.WebGreaseContext.<.cctor>b__f", "exploitability": 1, "attack_vector": "mscorlib_dll.System.Security.Cryptography.MD5CryptoServiceProvider.!newinit_0_0", "file_line_number": 1}, "build_id": 35444429}], "asset_info": {"guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "type": "APPLICATION", "name": "Verademo.NET", "attributes": {"app_url": "HomeAppProfile:90250:1394124", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2024-04-26T17:45:11.000Z", "scan_url": "StaticOverview:90250:1394124:35444429:35413146:35428796", "scan_type": "STATIC"}, {"status": "PUBLISHED", "modified_date": "2022-12-07T21:35:04.000Z", "scan_url": "DynamicParamsView:90250:1394124:22619331:22590622::22606272", "scan_type": "DYNAMIC"}], "created": "2022-03-29T16:55:35.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2024-04-26T17:45:11.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}}, "7d954dc6-fbc3-43da-8572-31c9dc5c0b98": {"findings_by_severity": {"sev5": 0, "sev4": 0, "sev3": 0, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [], "asset_info": {"guid": "7d954dc6-fbc3-43da-8572-31c9dc5c0b98", "type": "APPLICATION", "name": "Vulnerable_Tornado_App", "attributes": {"app_url": "HomeAppProfile:90250:1414756", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-04-19T17:52:18.000Z", "scan_url": "StaticOverview:90250:1414756:17952623:17924826:17940476", "scan_type": "STATIC"}], "created": "2022-04-19T17:28:29.000Z", "policy_in_grace_period": true, "policy_passed_rules": true, "policies": [{"guid": "9f47093a-0493-4ab4-bce4-3246eb2ab50f", "name": "Veracode Recommended Medium + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-04-19T17:52:18.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}}, "df376eb3-a039-40db-8d24-1c11da1bfd42": {"findings_by_severity": {"sev5": 0, "sev4": 0, "sev3": 0, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [], "asset_info": {"guid": "df376eb3-a039-40db-8d24-1c11da1bfd42", "type": "APPLICATION", "name": "OpenSSL", "attributes": {"app_url": "HomeAppProfile:90250:1509220", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-08-16T17:49:49.000Z", "scan_url": "StaticOverview:90250:1509220:20235769:20207605:20223255", "scan_type": "STATIC"}], "created": "2022-08-16T13:14:48.000Z", "policy_in_grace_period": true, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-08-16T17:49:49.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}}, "collection_summary": {"sev5": 4, "sev4": 17, "sev3": 97, "sev2": 4, "sev1": 0, "sev0": 0}}}