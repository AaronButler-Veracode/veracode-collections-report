{"name": "Widget Markets", "description": "", "created": "2022-06-28T20:11:24.000Z", "created_by": "verainternal_aabutler", "modified": "2023-02-16T15:08:15.000Z", "modified_by": "verainternal_aabutler", "tags": "", "guid": "c9d4869c-7965-4cd6-9d5d-05bdc58ff624", "org_id": "afa8dbc8-8040-439d-8ac6-7299dcfc0ffa", "business_unit": null, "compliance_status": "OUT_OF_COMPLIANCE", "last_scan_date": "2024-01-18T16:02:23.000Z", "compliance_overview": {"not_passing_policy": 4, "passing_policy": 0, "conditionally_passing_policy": 0, "not_assessed": 1, "total_items": 5, "total_ignored": 0}, "custom_fields": [{"name": "Custom 1", "value": ""}, {"name": "Custom 2", "value": ""}, {"name": "Custom 3", "value": ""}, {"name": "Custom 4", "value": ""}, {"name": "Custom 5", "value": ""}, {"name": "Custom 6", "value": ""}, {"name": "Custom 7", "value": ""}, {"name": "Custom 8", "value": ""}, {"name": "Custom 9", "value": ""}, {"name": "Custom 10", "value": ""}], "asset_infos": [{"guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "type": "APPLICATION", "name": "Verademo", "attributes": {"app_url": "HomeAppProfile:90250:1367805", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2024-01-18T16:02:23.000Z", "scan_url": "DynamicParamsView:90250:1367805:32246140:32216006::32231656", "scan_type": "DYNAMIC"}, {"status": "PUBLISHED", "modified_date": "2022-03-25T17:49:54.000Z", "scan_url": "ManualParamsView:90250:1367805:17489771:17462014:::17477664", "scan_type": "MANUAL"}, {"status": "PUBLISHED", "modified_date": "2024-01-10T19:49:23.000Z", "scan_url": "StaticOverview:90250:1367805:32035411:32005358:32021008", "scan_type": "STATIC"}], "created": "2022-03-03T14:17:53.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "ccdc9751-3057-44b4-b8f0-a1712cf17edd", "name": "OWASP Top 10", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2024-01-18T16:02:23.000Z", "policy_passed_scan_requirements": true, "is_ignored": false}}, {"guid": "5d690c8f-d696-48b8-a2f9-0056d8b05c8c", "type": "APPLICATION", "name": "verademo-java-gcp", "attributes": {"app_url": "HomeAppProfile:90250:1461267", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [], "created": "2022-06-16T18:59:27.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "4cbdbf17-7979-4848-bd7f-f5c0e1b67d18", "name": "Veracode Recommended High + SCA", "policy_compliance_status": "NOT_ASSESSED"}], "last_completed_scan_date": null, "policy_passed_scan_requirements": false, "is_ignored": false}}, {"guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "type": "APPLICATION", "name": "Verademo.NET", "attributes": {"app_url": "HomeAppProfile:90250:1394124", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2023-07-24T19:01:28.000Z", "scan_url": "StaticOverview:90250:1394124:27722772:27693572:27709222", "scan_type": "STATIC"}, {"status": "PUBLISHED", "modified_date": "2022-12-07T21:35:04.000Z", "scan_url": "DynamicParamsView:90250:1394124:22619331:22590622::22606272", "scan_type": "DYNAMIC"}], "created": "2022-03-29T16:55:35.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2023-07-24T19:01:28.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}, {"guid": "7d954dc6-fbc3-43da-8572-31c9dc5c0b98", "type": "APPLICATION", "name": "Vulnerable_Tornado_App", "attributes": {"app_url": "HomeAppProfile:90250:1414756", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-04-19T17:52:18.000Z", "scan_url": "StaticOverview:90250:1414756:17952623:17924826:17940476", "scan_type": "STATIC"}], "created": "2022-04-19T17:28:29.000Z", "policy_in_grace_period": true, "policy_passed_rules": true, "policies": [{"guid": "9f47093a-0493-4ab4-bce4-3246eb2ab50f", "name": "Veracode Recommended Medium + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-04-19T17:52:18.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}, {"guid": "df376eb3-a039-40db-8d24-1c11da1bfd42", "type": "APPLICATION", "name": "OpenSSL", "attributes": {"app_url": "HomeAppProfile:90250:1509220", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-08-16T17:49:49.000Z", "scan_url": "StaticOverview:90250:1509220:20235769:20207605:20223255", "scan_type": "STATIC"}], "created": "2022-08-16T13:14:48.000Z", "policy_in_grace_period": true, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-08-16T17:49:49.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}], "total_assets": 5, "total_ignored_assets": 0, "team_accessible": true, "restricted": false, "_links": {"self": {"href": "https://api.veracode.com/appsec/v1/collections/c9d4869c-7965-4cd6-9d5d-05bdc58ff624"}}, "findings_list": {"0dae4e5d-2744-4191-9e52-22eaec684310": {"summary_info": {"sev5": 2, "sev4": 14, "sev3": 107, "sev2": 9, "sev1": 0, "sev0": 0}, "app_findings": [{"issue_id": 290, "scan_type": "STATIC", "description": "<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "PROPOSED", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 37, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "com.veracode.verademo.controller.ToolsController.ping", "exploitability": 0, "attack_vector": "java.lang.Runtime.exec", "file_line_number": 53}, "annotations": [{"comment": "\rTechnique : M2 :  Establish and maintain control over all of your outputs\r\nSpecifics : Test\r\nRemaining Risk : Test\r\nVerification : Test", "action": "APPDESIGN", "created": "2024-02-01T16:36:04.061Z", "technique": "M2 :  Establish and maintain control over all of your outputs", "specifics": "Test", "remaining_risk": "Test", "verification": "Test", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-127 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:19:45.642Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 295, "scan_type": "STATIC", "description": "<span>This call to java.lang.Runtime.exec() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to exec() contains tainted data from the variables (new String\\[...\\]). The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 30, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "com.veracode.verademo.controller.ToolsController.fortune", "exploitability": 0, "attack_vector": "java.lang.Runtime.exec", "file_line_number": 83}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-128 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:19:48.251Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 45, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 17, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 165}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-14 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:17.390Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-254 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:37.727Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-74 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:23.857Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 55, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 38, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 249}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-15 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:19.496Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-255 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:38.583Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-75 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:24.419Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 296, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 56, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processRegister", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 310}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-129 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:19:50.903Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 101, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 58, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.processRegisterFinish", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 374}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-17 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:24.511Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-257 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:40.394Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-77 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:26.069Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 97, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 41, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 479}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-18 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:26.997Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-258 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:41.620Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-78 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:27.149Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 51, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the myInfo object, which contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 55, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 0, "attack_vector": "java.sql.PreparedStatement.executeQuery", "file_line_number": 490}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-19 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:29.326Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-259 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:41.992Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-79 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:27.828Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 134, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.PreparedStatement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. executeQuery() was called on the blabberQuery object, which contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 41, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.controller.BlabController.showBlabbers", "exploitability": 0, "attack_vector": "java.sql.PreparedStatement.executeQuery", "file_line_number": 467}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-6 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:42:57.911Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-246 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:31.007Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-66 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:17.632Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 46, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 40, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 42}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-11 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:10.184Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-251 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:35.191Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-71 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:21.194Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 66, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 75, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 49}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-12 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:12.576Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-252 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:36.081Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-72 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:22.264Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 155, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 53}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-13 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:14.639Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-253 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:36.812Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-73 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:23.173Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 50, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 44, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-9 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:05.722Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-249 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:33.811Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-69 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:19.908Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 120, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 47}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-10 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:07.929Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-250 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:34.558Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-70 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:20.680Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 132, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.executeQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to executeQuery() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 44, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.executeQuery", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-7 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:00.568Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-247 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:32.151Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-67 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:18.501Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 53, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to java.sql.Statement.execute() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to execute() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 0, "attack_vector": "java.sql.Statement.execute", "file_line_number": 47}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-8 has been opened for this flaw.", "action": "COMMENT", "created": "2022-11-29T18:43:03.324Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-248 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:12:33.018Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue CRAP-68 has been opened for this flaw.", "action": "COMMENT", "created": "2022-03-28T20:43:19.140Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 302, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. The first argument to addCookie() contains tainted data from the variables (new Cookie(...)). The tainted data originated from earlier calls to java.util.Base64$Encoder.encode, AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/utils/Utils.java", "file_name": "Utils.java", "module": "verademo.war", "relative_location": 50, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.utils.Utils.setCookie", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 55}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-130 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:19:53.355Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 15, "scan_type": "STATIC", "description": "<span>The serialized-object data stream used in the call to java.io.ObjectInput.readObject() appears to have been constructed with untrusted data. Attacker manipulation of this stream has the ability to cause the creation of objects of arbitrary Serializable types.  Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability. readObject() was called on the in object, which contains tainted data. The tainted data originated from an earlier call to javax.servlet.http.HttpServletRequest.getCookies.</span> <span>Avoid passing untrusted data; if the data is untrusted, consider switching to a safer serialization scheme such as JSON.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 502, "name": "Deserialization of Untrusted Data", "href": "https://api.veracode.com/appsec/v1/cwes/502"}, "file_path": "com/veracode/verademo/utils/UserFactory.java", "file_name": "UserFactory.java", "module": "verademo.war", "relative_location": 74, "finding_category": {"id": 22, "name": "Encapsulation", "href": "https://api.veracode.com/appsec/v1/categories/22"}, "procedure": "com.veracode.verademo.utils.UserFactory.createFromRequest", "exploitability": 0, "attack_vector": "java.io.ObjectInput.readObject", "file_line_number": 43}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-103 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:20.152Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 99, "scan_type": "STATIC", "description": "<span>This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "file_path": "com/veracode/verademo/utils/User.java", "file_name": "User.java", "module": "verademo.war", "relative_location": 19, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.utils.User.md5", "exploitability": 1, "attack_vector": "java.security.MessageDigest.getInstance", "file_line_number": 103}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-101 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:16.007Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 131, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD initializer</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "com/veracode/verademo/utils/Constants.java", "file_name": "Constants.java", "module": "verademo.war", "relative_location": -1, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "UNKNOWN", "exploitability": 1, "attack_vector": "JDBC_PASSWORD initializer", "file_line_number": 1}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-63 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:47.977Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 78, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. JDBC_PASSWORD</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "com/veracode/verademo/utils/Constants.java", "file_name": "Constants.java", "module": "verademo.war", "relative_location": 25, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.utils.Constants.!ctor", "exploitability": 1, "attack_vector": "JDBC_PASSWORD", "file_line_number": 13}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-64 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:49.937Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 135, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processLogin", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 228}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-51 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:20.645Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 303, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 8, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 235}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-140 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:19.615Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 74, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 31, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 247}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-53 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:25.209Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 44, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable formatString. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 59, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 253}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-54 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:27.405Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 36, "scan_type": "STATIC", "description": "<span>This call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 86, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 0, "attack_vector": "showPasswordHint", "file_line_number": 254}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-99 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:11.375Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 60, "scan_type": "STATIC", "description": "<span>This call to showPasswordHint() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 93, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.verademo.controller.UserController.showPasswordHint", "exploitability": 0, "attack_vector": "showPasswordHint", "file_line_number": 259}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-100 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:13.433Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 84, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable query. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 61, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processRegisterFinish", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 375}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-55 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:29.776Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 93, "scan_type": "STATIC", "description": "<span>This call to javax.mail.Message.setSubject() contains a CRLF injection flaw.  Writing untrusted input to an interface or external application that treats the CRLF (carriage return line feed) sequence as a delimiter to separate lines or records can result in that data being misinterpreted. The first argument to setSubject() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Sanitize CRLF sequences from untrusted input.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/93.html\">CWE</a> <a href=\"https://owasp.org/www-community/vulnerabilities/CRLF_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 93, "name": "Improper Neutralization of CRLF Sequences ('CRLF Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/93"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 75, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.emailUser", "exploitability": 1, "attack_vector": "javax.mail.Message.setSubject", "file_line_number": 419}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-30 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:32.074Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 79, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlMyEvents. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 38, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 477}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-56 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:31.990Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 142, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sql. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 51, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.showProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 488}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-57 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:34.623Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 260, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 11, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 541}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-141 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:22.169Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 6, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 87, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.processProfile", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 627}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-58 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:37.041Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 261, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 18, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 657}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-142 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:24.565Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 262, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 31, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 661}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-143 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:27.209Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 7, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 46, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 675}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-60 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:41.245Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 100, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.ServletResponse.setContentType() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 48, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 0, "attack_vector": "javax.servlet.ServletResponse.setContentType", "file_line_number": 678}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-33 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:39.367Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 114, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.setHeader() contains an HTTP response splitting flaw.  Writing untrusted input into an HTTP header allows an attacker to manipulate the HTTP response rendered by the browser, to inject additional headers or an entire response body into the response stream. Injecting headers can be used to trick various security mechanisms in browsers into allowing XSS style attacks. Injecting entire response bodies can not only cause XSS attacks to succeed but may even poison the cache of any intermediary proxies between the clients and the application server. </span> <span>Escape, encode, or remove carriage return and line feed characters from untrusted data before inclusion in HTTP response headers.  Whenever possible, use a security library such as ESAPI that provides safe versions of addHeader(), etc. that will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/113.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/HTTP_Response_Splitting\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 113, "name": "Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')", "href": "https://api.veracode.com/appsec/v1/cwes/113"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 55, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.downloadImage", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.setHeader", "file_line_number": 680}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-34 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:41.473Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 62, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.usernameExists", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 760}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-61 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:43.424Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 16, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 41, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.UserController.updateUsername", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 814}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-62 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:45.824Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 89, "scan_type": "STATIC", "description": "<span>This function uses the MD5() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 21, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.controller.UserController.md5", "exploitability": 1, "attack_vector": "java.security.MessageDigest.getInstance", "file_line_number": 908}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-102 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:17.994Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 263, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ToolsController.java", "file_name": "ToolsController.java", "module": "verademo.war", "relative_location": 13, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ToolsController.ping", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 49}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-139 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:17.141Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 323, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 328, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 329, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 310, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 311, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 312, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 313, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 314, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 315, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 316, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 317, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 330, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 331, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 308, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 318, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 319, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 324, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 325, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 334, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 335, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 320, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 321, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 326, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 327, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 332, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 333, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 309, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 322, "scan_type": "STATIC", "description": "<span>The application contains hard-coded information that may contain credentials to an external service.  The use of hard-coded credentials significantly increases the possibility that the account being protected will be compromised. create</span> <span>Store credentials out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/798.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2024-01-02T15:39:10.336Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 798, "name": "Use of Hard-coded Credentials", "href": "https://api.veracode.com/appsec/v1/cwes/798"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 98, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "com.veracode.verademo.controller.ResetController.<clinit>", "exploitability": 1, "attack_vector": "create", "file_line_number": 39}, "build_id": 32035411}, {"issue_id": 96, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 11, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 108}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-46 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:09.047Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 117, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 31, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 131}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-47 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:11.259Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 91, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 44, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 158}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-48 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:13.621Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 106, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to java.sql.Statement.executeQuery, and AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/ResetController.java", "file_name": "ResetController.java", "module": "verademo.war", "relative_location": 62, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.ResetController.processReset", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 192}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-49 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:15.890Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 264, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 11, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.showFeed", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 60}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-131 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:19:56.037Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 63, "scan_type": "STATIC", "description": "<span>This call to getMoreFeed() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 99, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.verademo.controller.BlabController.getMoreFeed", "exploitability": 0, "attack_vector": "getMoreFeed", "file_line_number": 196}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-74 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:11.906Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 265, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 22, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processFeed", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 213}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-132 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:19:58.727Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 266, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 15, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.showBlab", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 278}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-133 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:01.092Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 267, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 21, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processBlab", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 373}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-134 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:03.514Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 268, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 20, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.showBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 444}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-135 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:06.062Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 269, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.sql.Statement.executeQuery, and javax.servlet.http.HttpServletRequest.getHeader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 19, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 523}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-136 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:08.670Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 270, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 31, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 530}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-137 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:11.550Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 271, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/controller/BlabController.java", "file_name": "BlabController.java", "module": "verademo.war", "relative_location": 36, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.controller.BlabController.processBlabbers", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 531}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-138 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:14.482Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 141, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 35, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 41}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-43 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:02.544Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 71, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 72, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 48}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-44 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:04.666Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 88, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/RemoveAccountCommand.java", "file_name": "RemoveAccountCommand.java", "module": "verademo.war", "relative_location": 90, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.RemoveAccountCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 52}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-45 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:06.845Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 12, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 39}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-41 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:57.759Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 122, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/ListenCommand.java", "file_name": "ListenCommand.java", "module": "verademo.war", "relative_location": 89, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.ListenCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 46}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-42 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:00.261Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 19, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 39}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-39 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:53.246Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 121, "scan_type": "STATIC", "description": "<span>This call to org.apache.log4j.Category.info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "com/veracode/verademo/commands/IgnoreCommand.java", "file_name": "IgnoreCommand.java", "module": "verademo.war", "relative_location": 89, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "com.veracode.verademo.commands.IgnoreCommand.execute", "exploitability": 1, "attack_vector": "org.apache.log4j.Category.info", "file_line_number": 46}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-40 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:02:55.554Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 272, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable request.getParameter(). The tainted data originated from an earlier call to javax.servlet.ServletRequest.getParameter. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/tools.jsp", "file_name": "tools.jsp", "module": "verademo.war", "relative_location": 35, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp._jspService", "exploitability": 2, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 64}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-255 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-26T03:04:35.005Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 153, "scan_type": "STATIC", "description": "<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable ping. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/tools.jsp", "file_name": "tools.jsp", "module": "verademo.war", "relative_location": 49, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp._jspService", "exploitability": 0, "attack_vector": "java.io.Writer.write", "file_line_number": 67}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-97 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:06.293Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 119, "scan_type": "STATIC", "description": "<span>This call to java.io.Writer.write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to write() contains tainted data from the variable fortunes. The tainted data originated from an earlier call to java.lang.Process.getInputStream. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/tools.jsp", "file_name": "tools.jsp", "module": "verademo.war", "relative_location": 58, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.tools_jsp._jspService", "exploitability": 0, "attack_vector": "java.io.Writer.write", "file_line_number": 77}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-98 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:08.743Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 147, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/register.jsp", "file_name": "register.jsp", "module": "verademo.war", "relative_location": 37, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-94 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:58.622Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 107, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/register.jsp", "file_name": "register.jsp", "module": "verademo.war", "relative_location": 57, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 86}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-95 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:01.239Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 75, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/register-finish.jsp", "file_name": "register-finish.jsp", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-92 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:54.012Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 108, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/register-finish.jsp", "file_name": "register-finish.jsp", "module": "verademo.war", "relative_location": 52, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 82}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-93 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:56.177Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 57, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 16, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 62}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-84 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:34.009Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 27, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 25, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 90}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-85 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:36.409Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 102, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable realName. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 28, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 101}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-86 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:38.745Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 104, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabName. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 32, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 110}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-87 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:41.546Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 82, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 36, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 119}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-88 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:44.383Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 144, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 54, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 160}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-89 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:46.628Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 125, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable heckler.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 57, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 163}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-90 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:48.919Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 33, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable events.get(). The tainted data originated from an earlier call to java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 74, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 200}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-91 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:51.440Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 105, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/login.jsp", "file_name": "login.jsp", "module": "verademo.war", "relative_location": 33, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-81 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:27.220Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 273, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable target. The tainted data originated from an earlier call to AnnotationVirtualController.vc_annotation_entry. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/login.jsp", "file_name": "login.jsp", "module": "verademo.war", "relative_location": 50, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 78}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-146 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:34.799Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 274, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable username. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/login.jsp", "file_name": "login.jsp", "module": "verademo.war", "relative_location": 59, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 85}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-254 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-26T03:04:32.074Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 275, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable currentUser. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, and java.sql.Statement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 14, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 58}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-145 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:32.270Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 10, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 21, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 69}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-76 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:16.211Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 40, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 33, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 93}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-77 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:18.581Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 136, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 37, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 96}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-78 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:20.647Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 143, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 40, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 98}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-79 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:22.748Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 31, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable post.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 65, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 141}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-80 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:25.049Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 76, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blabbers.jsp", "file_name": "blabbers.jsp", "module": "verademo.war", "relative_location": 23, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 65}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-71 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:04.780Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 109, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blabbers.jsp", "file_name": "blabbers.jsp", "module": "verademo.war", "relative_location": 38, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 100}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-72 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:07.292Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 150, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blabber.getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blabbers.jsp", "file_name": "blabbers.jsp", "module": "verademo.war", "relative_location": 42, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 103}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-73 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:09.342Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 29, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable blab_name. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 19, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 56}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-65 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:51.931Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 276, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable content. The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 24, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 60}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-144 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-25T18:20:29.676Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 14, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable error. The tainted data originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 33, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 68}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-66 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:53.952Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 4, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getUsername(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 55, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 104}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-68 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:03:58.359Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 133, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getContent(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 59, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 108}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-69 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:00.347Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 3, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.jsp.JspWriter.print() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to print() contains tainted data from the variable comment.getAuthor().getBlabName(). The tainted data originated from an earlier call to java.sql.PreparedStatement.executeQuery. The tainted data is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 64, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 110}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-70 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:04:02.632Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 277, "scan_type": "STATIC", "description": "<span>This call to javax.servlet.http.HttpServletResponse.addCookie() adds a cookie to the HTTP response that does not have the Secure attribute set.  Failing to set this attribute allows the browser to send the cookie unencrypted over an HTTP session. </span> <span>Set the Secure attribute for all cookies used by HTTPS sessions.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/614.html\">CWE</a> <a href=\"https://owasp.org/www-community/controls/SecureCookieAttribute\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2023-03-17T14:09:00.235Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "PROPOSED", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 614, "name": "Sensitive Cookie in HTTPS Session Without 'Secure' Attribute", "href": "https://api.veracode.com/appsec/v1/cwes/614"}, "file_path": "com/veracode/verademo/utils/Utils.java", "file_name": "Utils.java", "module": "verademo.war", "relative_location": 50, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "com.veracode.verademo.utils.Utils.setCookie", "exploitability": 0, "attack_vector": "javax.servlet.http.HttpServletResponse.addCookie", "file_line_number": 55}, "annotations": [{"comment": "Controlled by xyz", "action": "NETENV", "created": "2023-06-26T18:44:06.337Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-257 has been opened for this flaw.", "action": "COMMENT", "created": "2023-06-26T03:04:40.324Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 98, "scan_type": "STATIC", "description": "<span> The application calls the javax.mail.Transport.send() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to send() contains data from an error message (possibly containing untrusted data) from the variable message. The data from an error message (possibly containing untrusted data) originated from earlier calls to java.lang.NullPointerException.getMessage, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "com/veracode/verademo/controller/UserController.java", "file_name": "UserController.java", "module": "verademo.war", "relative_location": 92, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.verademo.controller.UserController.emailExceptionsToAdmin", "exploitability": 0, "attack_vector": "javax.mail.Transport.send", "file_line_number": 898}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-122 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:06:02.691Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 90, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/register.jsp", "file_name": "register.jsp", "module": "verademo.war", "relative_location": 37, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-121 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:06:00.651Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 21, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/register-finish.jsp", "file_name": "register-finish.jsp", "module": "verademo.war", "relative_location": 39, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.register_002dfinish_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-120 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:58.489Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 139, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/profile.jsp", "file_name": "profile.jsp", "module": "verademo.war", "relative_location": 16, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.profile_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 62}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-119 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:56.195Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 87, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/login.jsp", "file_name": "login.jsp", "module": "verademo.war", "relative_location": 33, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.login_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-118 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:53.806Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 81, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/feed.jsp", "file_name": "feed.jsp", "module": "verademo.war", "relative_location": 21, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.feed_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 69}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-117 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:51.505Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 30, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/blabbers.jsp", "file_name": "blabbers.jsp", "module": "verademo.war", "relative_location": 23, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blabbers_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 65}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-116 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:49.188Z", "user_name": "Aaron Butler"}], "build_id": 32035411}, {"issue_id": 95, "scan_type": "STATIC", "description": "<span> The application calls the javax.servlet.jsp.JspWriter.print() function, which may expose information about the application logic or other details such as the names and versions of the application container and associated components.  This information can be useful in executing other attacks and can also enable the attacker to target known vulnerabilities in application components. The first argument to print() contains data from an error message (possibly containing untrusted data) from the variable error. The data from an error message (possibly containing untrusted data) originated from earlier calls to AnnotationVirtualController.vc_annotation_entry, java.lang.Throwable.getMessage, and java.lang.Throwable.printStackTrace. The data from an error message (possibly containing untrusted data) is directed into an output stream returned by javax.servlet.jsp.JspWriter.</span> <span>Ensure that error codes or other messages returned to end users are not overly verbose.  Sanitize all messages of any sensitive information that is not absolutely necessary.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/209.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-03T14:19:03.888Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2024-01-10T19:49:23.096Z"}, "finding_details": {"severity": 2, "cwe": {"id": 209, "name": "Generation of Error Message Containing Sensitive Information", "href": "https://api.veracode.com/appsec/v1/cwes/209"}, "file_path": "/WEB-INF/views/blab.jsp", "file_name": "blab.jsp", "module": "verademo.war", "relative_location": 33, "finding_category": {"id": 8, "name": "Information Leakage", "href": "https://api.veracode.com/appsec/v1/categories/8"}, "procedure": "com.veracode.compiledjsp.xverademowar.WEB_002dINF.views.blab_jsp._jspService", "exploitability": 0, "attack_vector": "javax.servlet.jsp.JspWriter.print", "file_line_number": 68}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VER-115 has been opened for this flaw.", "action": "COMMENT", "created": "2022-12-06T03:05:46.892Z", "user_name": "Aaron Butler"}], "build_id": 32035411}], "asset_info": {"guid": "0dae4e5d-2744-4191-9e52-22eaec684310", "type": "APPLICATION", "name": "Verademo", "attributes": {"app_url": "HomeAppProfile:90250:1367805", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2024-01-18T16:02:23.000Z", "scan_url": "DynamicParamsView:90250:1367805:32246140:32216006::32231656", "scan_type": "DYNAMIC"}, {"status": "PUBLISHED", "modified_date": "2022-03-25T17:49:54.000Z", "scan_url": "ManualParamsView:90250:1367805:17489771:17462014:::17477664", "scan_type": "MANUAL"}, {"status": "PUBLISHED", "modified_date": "2024-01-10T19:49:23.000Z", "scan_url": "StaticOverview:90250:1367805:32035411:32005358:32021008", "scan_type": "STATIC"}], "created": "2022-03-03T14:17:53.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "ccdc9751-3057-44b4-b8f0-a1712cf17edd", "name": "OWASP Top 10", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2024-01-18T16:02:23.000Z", "policy_passed_scan_requirements": true, "is_ignored": false}}}, "5d690c8f-d696-48b8-a2f9-0056d8b05c8c": {"summary_info": {"sev5": 0, "sev4": 0, "sev3": 0, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [], "asset_info": {"guid": "5d690c8f-d696-48b8-a2f9-0056d8b05c8c", "type": "APPLICATION", "name": "verademo-java-gcp", "attributes": {"app_url": "HomeAppProfile:90250:1461267", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [], "created": "2022-06-16T18:59:27.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "4cbdbf17-7979-4848-bd7f-f5c0e1b67d18", "name": "Veracode Recommended High + SCA", "policy_compliance_status": "NOT_ASSESSED"}], "last_completed_scan_date": null, "policy_passed_scan_requirements": false, "is_ignored": false}}}, "e88f93c6-afb9-44e4-a002-a4df820d73f7": {"summary_info": {"sev5": 2, "sev4": 9, "sev3": 49, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [{"issue_id": 6, "scan_type": "STATIC", "description": "<span>This call to system_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on the proc object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.ToolsController.Ping.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "CLOSED", "resolution": "MITIGATED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "APPROVED", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/toolscontroller.cs", "file_name": "toolscontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 64, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ToolsController.Ping", "exploitability": 0, "attack_vector": "system_dll.System.Diagnostics.Process.Start", "file_line_number": 59}, "annotations": [{"comment": "Approved", "action": "APPROVED", "created": "2022-08-03T19:30:00.764Z", "user_name": "Aaron Butler"}, {"comment": "Addressed by XYZ via ABC", "action": "APPDESIGN", "created": "2022-03-30T18:22:47.333Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 31, "scan_type": "STATIC", "description": "<span>This call to system_dll.System.Diagnostics.Process.Start() contains a command injection flaw.  The argument to the function is constructed using untrusted input.  If an attacker is allowed to specify all or part of the command, it may be possible to execute commands on the server with the privileges of the executing process.  The level of exposure depends on the effectiveness of input validation routines, if any. Start() was called on the proc object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.ToolsController.Fortune.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.  Most APIs that execute system commands also have a \"safe\" version of the method that takes an array of strings as input rather than a single string, which protects against some forms of command injection.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/78.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Command_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 5, "cwe": {"id": 78, "name": "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/78"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/toolscontroller.cs", "file_name": "toolscontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 66, "finding_category": {"id": 18, "name": "Command or Argument Injection", "href": "https://api.veracode.com/appsec/v1/categories/18"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ToolsController.Fortune", "exploitability": 0, "attack_vector": "system_dll.System.Diagnostics.Process.Start", "file_line_number": 102}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-1 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:33:51.711Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-91 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:49.766Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 29, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on the searchBlabs object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.BlabController.PostSearchBlabs.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 47, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PostSearchBlabs", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteReader", "file_line_number": 97}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-3 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:33:56.832Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-93 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:51.529Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 38, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on the blabbers object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.BlabController.GetBlabbers.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 36, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PopulateBlabbersViewModel", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteReader", "file_line_number": 262}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-4 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:33:59.510Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-94 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:52.066Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 34, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to entityframework_dll.System.Data.Entity.Database.SqlQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. The first argument to SqlQuery() contains tainted data. The tainted data originated from an earlier call to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/authcontrollerbase.cs", "file_name": "authcontrollerbase.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 59, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AuthControllerBase.LoginUser", "exploitability": 0, "attack_vector": "entityframework_dll.System.Data.Entity.Database.SqlQuery", "file_line_number": 21}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-2 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:33:54.334Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-92 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:50.674Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 67, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteReader() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteReader() was called on the sqlStatement object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/removeaccountcommand.cs", "file_name": "removeaccountcommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 46, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.RemoveAccountCommand.Execute", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteReader", "file_line_number": 27}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-8 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:11.037Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-98 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:55.126Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 11, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on the sqlStatement object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/removeaccountcommand.cs", "file_name": "removeaccountcommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 81, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.RemoveAccountCommand.Execute", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteNonQuery", "file_line_number": 35}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-9 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:13.962Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-99 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:56.346Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 50, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on the sqlStatement object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/removeaccountcommand.cs", "file_name": "removeaccountcommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 97, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.RemoveAccountCommand.Execute", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteNonQuery", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-10 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:16.724Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-100 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:57.097Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 45, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on the sqlStatement object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/listencommand.cs", "file_name": "listencommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 94, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.ListenCommand.Execute", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteNonQuery", "file_line_number": 55}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-7 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:08.303Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-97 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:54.372Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 47, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteScalar() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteScalar() was called on the sqlStatement object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteScalar.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/ignorecommand.cs", "file_name": "ignorecommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 55, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.IgnoreCommand.Execute", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteScalar", "file_line_number": 32}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-5 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:03.009Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-95 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:52.837Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 23, "scan_type": "STATIC", "description": "<span>This database query contains a SQL injection flaw.  The call to system_data_dll.System.Data.IDbCommand.ExecuteNonQuery() constructs a dynamic SQL query using a variable derived from untrusted input.  An attacker could exploit this flaw to execute arbitrary SQL queries against the database. ExecuteNonQuery() was called on the sqlStatement object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteScalar.</span> <span>Avoid dynamically constructing SQL queries.  Instead, use parameterized prepared statements to prevent the database from interpreting the contents of bind variables as part of the query.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/89.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/SQL_Injection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 4, "cwe": {"id": 89, "name": "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')", "href": "https://api.veracode.com/appsec/v1/cwes/89"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/ignorecommand.cs", "file_name": "ignorecommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 97, "finding_category": {"id": 19, "name": "SQL Injection", "href": "https://api.veracode.com/appsec/v1/categories/19"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.IgnoreCommand.Execute", "exploitability": 0, "attack_vector": "system_data_dll.System.Data.IDbCommand.ExecuteNonQuery", "file_line_number": 41}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-6 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:05.567Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-96 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:53.819Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 35, "scan_type": "STATIC", "description": "<span>This call to system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Html().Raw(). The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.ToolsController.Ping.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/obj/debug/aspnetcompilemerge/source/views/tools/tools.cshtml", "file_name": "tools.cshtml", "module": "app_web_tools.cshtml.f024d85f.dll", "relative_location": 41, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "app_web_tools_cshtml_f024d85f_dll.ASP._Page_Views_Tools_Tools_cshtml.Execute", "exploitability": 0, "attack_vector": "system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write", "file_line_number": 17}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-43 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:43.813Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 10, "scan_type": "STATIC", "description": "<span>This call to system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Html().Raw(). The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/obj/debug/aspnetcompilemerge/source/views/blab/feed.cshtml", "file_name": "feed.cshtml", "module": "app_web_feed.cshtml.a67c04f4.dll", "relative_location": 35, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "app_web_feed_cshtml_a67c04f4_dll.ASP._Page_Views_Blab_Feed_cshtml.Execute", "exploitability": 0, "attack_vector": "system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write", "file_line_number": 42}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-41 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:38.533Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 3, "scan_type": "STATIC", "description": "<span>This call to system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Html().Raw(). The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/obj/debug/aspnetcompilemerge/source/views/blab/feed.cshtml", "file_name": "feed.cshtml", "module": "app_web_feed.cshtml.a67c04f4.dll", "relative_location": 83, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "app_web_feed_cshtml_a67c04f4_dll.ASP._Page_Views_Blab_Feed_cshtml.Execute", "exploitability": 0, "attack_vector": "system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write", "file_line_number": 83}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-42 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:41.002Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 19, "scan_type": "STATIC", "description": "<span>This call to system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write() contains a cross-site scripting (XSS) flaw.  The application populates the HTTP response with untrusted input, allowing an attacker to embed malicious content, such as Javascript code, which will be executed in the context of the victim's browser.  XSS vulnerabilities are commonly exploited to steal or manipulate cookies, modify presentation of content, and compromise confidential information, with new attack vectors being discovered on a regular basis. The first argument to Write() contains tainted data from the variable this.get_Html().Raw(). The tainted data originated from an earlier call to system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Use contextual escaping on all untrusted data before using it to construct any portion of an HTTP response.  The escaping method should be chosen based on the specific use case of the untrusted data, otherwise it may not protect fully against the attack. For example, if the data is being written to the body of an HTML page, use HTML entity escaping; if the data is being written to an attribute, use attribute escaping; etc.  Both the OWASP Java Encoder library and the Microsoft AntiXSS library provide contextual escaping methods. For more details on contextual escaping, see https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.md. In addition, as a best practice, always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/79.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/xss/\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 80, "name": "Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)", "href": "https://api.veracode.com/appsec/v1/cwes/80"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/obj/debug/aspnetcompilemerge/source/views/blab/blab.cshtml", "file_name": "blab.cshtml", "module": "app_web_blab.cshtml.a67c04f4.dll", "relative_location": 82, "finding_category": {"id": 20, "name": "Cross-Site Scripting (XSS)", "href": "https://api.veracode.com/appsec/v1/categories/20"}, "procedure": "app_web_blab_cshtml_a67c04f4_dll.ASP._Page_Views_Blab_Blab_cshtml.Execute", "exploitability": 0, "attack_vector": "system_web_webpages_dll.System.Web.WebPages.WebPageExecutingBase.Write", "file_line_number": 59}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-40 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:36.219Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 53, "scan_type": "STATIC", "description": "<span>The serialized-object data stream used in the call to mscorlib_dll.System.Runtime.Serialization.IFormatter.Deserialize() appears to have been constructed with external (possibly untrusted) data. The used serializer will include object type information in the output and processes it from the input. Attacker modification of this data can result in the creation of objects of arbitrary serializable types. Paired with a weakness in another class's constructor, this could result in a denial of service, code execution, or data corruption vulnerability.</span> <span>Do not use this way of serializing data; consider switching to a safer serialization scheme such as JSON or Protocol Buffers.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/502.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 502, "name": "Deserialization of Untrusted Data", "href": "https://api.veracode.com/appsec/v1/cwes/502"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/helper/userserializehelper.cs", "file_name": "userserializehelper.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 76, "finding_category": {"id": 22, "name": "Encapsulation", "href": "https://api.veracode.com/appsec/v1/categories/22"}, "procedure": "verademonet_dll.VeraDemoNet.Helper.UserSerializeHelper.CreateFromRequest", "exploitability": 0, "attack_vector": "mscorlib_dll.System.Runtime.Serialization.IFormatter.Deserialize", "file_line_number": 45}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-56 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:16.748Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 66, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. Password</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/dataaccess/user.cs", "file_name": "user.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 23, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "verademonet_dll.VeraDemoNet.DataAccess.User.!ctor", "exploitability": 1, "attack_vector": "Password", "file_line_number": 33}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-38 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:30.713Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 14, "scan_type": "STATIC", "description": "<span>This variable assignment uses a hard-coded password that may compromise system security in a way that cannot be easily remedied.  The use of a hard-coded password significantly increases the possibility that the account being protected will be compromised.  Moreover, the password cannot be changed without patching the software.  If a hard-coded password is compromised in a commercial product, all deployed instances may be vulnerable to attack.  In some cases, this finding may indicate a reference to a password (e.g. the name of a key in a properties file) rather than an actual password. PasswordHint</span> <span>Store passwords out-of-band from the application code.  Follow best practices for protecting credentials stored in locations such as configuration or properties files. An HSM may be appropriate for particularly sensitive credentials.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/259.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 259, "name": "Use of Hard-coded Password", "href": "https://api.veracode.com/appsec/v1/cwes/259"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/dataaccess/user.cs", "file_name": "user.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 33, "finding_category": {"id": 10, "name": "Credentials Management", "href": "https://api.veracode.com/appsec/v1/categories/10"}, "procedure": "verademonet_dll.VeraDemoNet.DataAccess.User.!ctor", "exploitability": 1, "attack_vector": "PasswordHint", "file_line_number": 34}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-39 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:33.500Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 32, "scan_type": "STATIC", "description": "<span>This function uses the mscorlib_dll.System.Security.Cryptography.MD5.Create() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/customauthentication/custommembership.cs", "file_name": "custommembership.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 24, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.CustomAuthentication.CustomMembership.Md5Hash", "exploitability": 1, "attack_vector": "mscorlib_dll.System.Security.Cryptography.MD5.Create", "file_line_number": 227}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-52 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:06.664Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 25, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The Ping() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/toolscontroller.cs", "file_name": "toolscontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ToolsController.Ping", "exploitability": 0, "attack_vector": "Ping", "file_line_number": 34}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-22 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:47.570Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-110 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:06.085Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 20, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The Fortune() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/toolscontroller.cs", "file_name": "toolscontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ToolsController.Fortune", "exploitability": 0, "attack_vector": "Fortune", "file_line_number": 77}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-23 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:50.289Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 58, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostReset() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.PostReset", "exploitability": 0, "attack_vector": "PostReset", "file_line_number": 67}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-21 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:45.010Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-109 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:05.299Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 1, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 38, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddListeners", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 145}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-44 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:46.600Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 9, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 58, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddListeners", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 150}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-34 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:20.331Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 41, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 50, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddUserData", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 171}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-35 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:23.009Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 60, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 34, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddBlabs", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 200}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-45 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:49.257Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 63, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 38, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddBlabs", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 203}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-46 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:51.830Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 7, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 47, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddBlabs", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 206}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-36 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:25.995Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 55, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 16, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddComments", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 237}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-47 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:54.109Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 51, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 28, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddComments", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 247}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-48 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:56.822Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 4, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 34, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddComments", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 251}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-49 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:59.297Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 56, "scan_type": "STATIC", "description": "<span>Standard random number generators do not provide a sufficient amount of entropy when used for security purposes. Attackers can brute force the output of pseudorandom number generators such as rand().</span> <span>If this random number is used where security is a concern, such as generating a session key or session identifier, use a trusted cryptographic random number generator instead.  These can be found on the Windows platform in the CryptoAPI or in an open source library such as OpenSSL.  In Java, use the SecureRandom object to ensure sufficient entropy.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/331.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 331, "name": "Insufficient Entropy", "href": "https://api.veracode.com/appsec/v1/cwes/331"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 38, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddComments", "exploitability": -1, "attack_vector": "mscorlib_dll.System.Random.Next", "file_line_number": 255}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-50 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:01.782Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 22, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from an earlier call to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/resetcontroller.cs", "file_name": "resetcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 44, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.ResetController.AddComments", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 257}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-37 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:28.240Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 52, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostSearchBlabs() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PostSearchBlabs", "exploitability": 0, "attack_vector": "PostSearchBlabs", "file_line_number": 84}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-17 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:34.892Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-105 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:00.848Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 37, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostFeed() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PostFeed", "exploitability": 0, "attack_vector": "PostFeed", "file_line_number": 197}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-18 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:37.412Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-106 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:02.118Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 33, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostBlabbers() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers", "exploitability": 0, "attack_vector": "PostBlabbers", "file_line_number": 291}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-19 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:39.890Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-107 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:03.508Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 42, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.Activator.CreateInstance() uses reflection in an unsafe manner.  An attacker can specify the class name to be instantiated, which may create unexpected control flow paths through the application.  Depending on how reflection is being used, the attack vector may allow the attacker to bypass security checks or otherwise cause the application to behave in an unexpected manner.  Even if the object does not implement the specified interface and a ClassCastException is thrown, the constructor of the untrusted class name will have already executed. The first argument to CreateInstance() contains tainted data from the variable commandType. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers.</span> <span>Validate the class name against a combination of white and blocklists to ensure that only expected behavior is produced.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/470.html\">CWE</a> <a href=\"https://owasp.org/www-community/vulnerabilities/Unsafe_use_of_Reflection\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 470, "name": "Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')", "href": "https://api.veracode.com/appsec/v1/cwes/470"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 65, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers", "exploitability": 1, "attack_vector": "mscorlib_dll.System.Activator.CreateInstance", "file_line_number": 308}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-61 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:30.177Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 17, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostBlab() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/blabcontroller.cs", "file_name": "blabcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlab", "exploitability": 0, "attack_vector": "PostBlab", "file_line_number": 326}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-20 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:42.370Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-108 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:04.438Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 15, "scan_type": "STATIC", "description": "<span>This function uses the mscorlib_dll.System.Security.Cryptography.MD5.Create() function, which uses a hash algorithm that is considered weak. In recent years, researchers have demonstrated ways to breach many uses of previously-thought-safe hash functions such as MD5. </span> <span>Consider using a stronger algorithm in order to prevent attackers from being able to manipulate hash results. If this algorithm is being used to hash passwords, then consider using a strong computationally-hard algorithm such as PBKDF2 or bcrypt instead of a plain hashing algorithm.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 327, "name": "Use of a Broken or Risky Cryptographic Algorithm", "href": "https://api.veracode.com/appsec/v1/cwes/327"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/authcontrollerbase.cs", "file_name": "authcontrollerbase.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 24, "finding_category": {"id": 12, "name": "Cryptographic Issues", "href": "https://api.veracode.com/appsec/v1/categories/12"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AuthControllerBase.Md5Hash", "exploitability": 1, "attack_vector": "mscorlib_dll.System.Security.Cryptography.MD5.Create", "file_line_number": 72}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-51 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:04.292Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 59, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to verademonet_dll.VeraDemoNet.Controllers.AccountController.GetLogin, and app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 7, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.GetLogin", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 34}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-24 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:52.840Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 61, "scan_type": "STATIC", "description": "<span>This call to GetLogin() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from earlier calls to verademonet_dll.VeraDemoNet.Controllers.AccountController.GetLogin, and app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 56, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.GetLogin", "exploitability": 1, "attack_vector": "GetLogin", "file_line_number": 53}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-59 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:24.705Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 5, "scan_type": "STATIC", "description": "<span>.NET MVC uses a feature called Model Binding to automatically map HTTP POST Form parameters to a Model indicated by the type specified in the Controller Action's method argument. Since all HTTP POST data could be under the control of an attacker, additional values may be included beyond those intended. If those additional POST parameters match the names of attributes on the model, they may be updated as well.</span> <span>Explicitly specify which of the Model's attributes should be accessible using the Bind attribute by setting the Include property to each allowable property. If it is not feasible to use the preferred property Include, instead specify which attributes should not be accessible using the Bind attribute and setting the Exclude property to each prohibited property. Keep in mind that when choosing to exclude properties the issue will not be resolved due to possible future additions/changes of properties on the Model.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/915.html\">CWE</a> <a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application#overpost\">See Security Note on Implementing Basic CRUD Functionality with the Entity Framework in ASP.NET MVC Application</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 915, "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes", "href": "https://api.veracode.com/appsec/v1/cwes/915"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostLogin", "exploitability": 1, "attack_vector": "PostLogin", "file_line_number": 63}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-57 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:19.542Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 28, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostLogin() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostLogin", "exploitability": 0, "attack_vector": "PostLogin", "file_line_number": 63}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-13 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:24.489Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-101 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:57.854Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 43, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.AccountController.PostLogin.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 12, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostLogin", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 64}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-25 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:55.385Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 65, "scan_type": "STATIC", "description": "<span>This call to PostLogin() contains a URL redirection to untrusted site flaw.  Writing untrusted input into a URL value could cause the web application to redirect the request to the specified URL, leading to phishing attempts to steal user credentials.</span> <span>Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.AccountController.PostLogin.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/601.html\">CWE</a> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 601, "name": "URL Redirection to Untrusted Site ('Open Redirect')", "href": "https://api.veracode.com/appsec/v1/cwes/601"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 83, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostLogin", "exploitability": 1, "attack_vector": "PostLogin", "file_line_number": 88}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-60 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:27.288Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 49, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostProfile() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostProfile", "exploitability": 0, "attack_vector": "PostProfile", "file_line_number": 139}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-14 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:27.288Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-102 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:58.508Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 64, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.File.Delete() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The first argument to Delete() contains tainted data from the variable oldImage. The tainted data originated from earlier calls to verademonet_dll.VeraDemoNet.Controllers.AccountController.PostProfile, and app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 73, "name": "External Control of File Name or Path", "href": "https://api.veracode.com/appsec/v1/cwes/73"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 78, "finding_category": {"id": 1, "name": "Directory Traversal", "href": "https://api.veracode.com/appsec/v1/categories/1"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostProfile", "exploitability": 0, "attack_vector": "mscorlib_dll.System.IO.File.Delete", "file_line_number": 206}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-53 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:09.316Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 40, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.AccountController.PostProfile.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 87, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostProfile", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 213}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-26 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:58.507Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 8, "scan_type": "STATIC", "description": "<span>This call to mscorlib_dll.System.IO.File.Move() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. The second argument to Move() contains tainted data from the variable newFilename. The tainted data originated from earlier calls to verademonet_dll.VeraDemoNet.Controllers.AccountController.PostProfile, and app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 73, "name": "External Control of File Name or Path", "href": "https://api.veracode.com/appsec/v1/cwes/73"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 96, "finding_category": {"id": 1, "name": "Directory Traversal", "href": "https://api.veracode.com/appsec/v1/categories/1"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.UpdateUsername", "exploitability": 0, "attack_vector": "mscorlib_dll.System.IO.File.Move", "file_line_number": 307}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-54 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:11.950Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 46, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.AccountController.DownloadProfileImage.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 79, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.DownloadProfileImage", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 366}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-27 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:01.165Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 2, "scan_type": "STATIC", "description": "<span>This call to system_web_mvc_dll.System.Web.Mvc.Controller.File() contains a path manipulation flaw.  The argument to the function is a filename constructed using untrusted input.  If an attacker is allowed to specify all or part of the filename, it may be possible to gain unauthorized access to files on the server, including those outside the webroot, that would be normally be inaccessible to end users.  The level of exposure depends on the effectiveness of input validation routines, if any. File() was called on the this object, which contains tainted data. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.AccountController.DownloadProfileImage.</span> <span>Validate all untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.  When using blocklists, be sure that the sanitizing routine performs a sufficient number of iterations to remove all instances of disallowed characters.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/73.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Path_Traversal\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 73, "name": "External Control of File Name or Path", "href": "https://api.veracode.com/appsec/v1/cwes/73"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 99, "finding_category": {"id": 1, "name": "Directory Traversal", "href": "https://api.veracode.com/appsec/v1/categories/1"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.DownloadProfileImage", "exploitability": 0, "attack_vector": "system_web_mvc_dll.System.Web.Mvc.Controller.File", "file_line_number": 368}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-55 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:14.340Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 16, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostRegister() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostRegister", "exploitability": 0, "attack_vector": "PostRegister", "file_line_number": 381}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-15 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:29.730Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-103 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:10:59.231Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 12, "scan_type": "STATIC", "description": "<span>.NET MVC uses a feature called Model Binding to automatically map HTTP POST Form parameters to a Model indicated by the type specified in the Controller Action's method argument. Since all HTTP POST data could be under the control of an attacker, additional values may be included beyond those intended. If those additional POST parameters match the names of attributes on the model, they may be updated as well.</span> <span>Explicitly specify which of the Model's attributes should be accessible using the Bind attribute by setting the Include property to each allowable property. If it is not feasible to use the preferred property Include, instead specify which attributes should not be accessible using the Bind attribute and setting the Exclude property to each prohibited property. Keep in mind that when choosing to exclude properties the issue will not be resolved due to possible future additions/changes of properties on the Model.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/915.html\">CWE</a> <a href=\"https://docs.microsoft.com/en-us/aspnet/mvc/overview/getting-started/getting-started-with-ef-using-mvc/implementing-basic-crud-functionality-with-the-entity-framework-in-asp-net-mvc-application#overpost\">See Security Note on Implementing Basic CRUD Functionality with the Entity Framework in ASP.NET MVC Application</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 915, "name": "Improperly Controlled Modification of Dynamically-Determined Object Attributes", "href": "https://api.veracode.com/appsec/v1/cwes/915"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 25, "name": "Insufficient Input Validation", "href": "https://api.veracode.com/appsec/v1/categories/25"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostRegisterFinish", "exploitability": 1, "attack_vector": "PostRegisterFinish", "file_line_number": 486}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-58 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:36:22.166Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 13, "scan_type": "STATIC", "description": "<span>The ASP.NET MVC Core Controller action does not appear to have protection against cross-site request forgery attacks. The PostRegisterFinish() action could allow a malicious web application to influence the interactions between (trusted) client browser and web-server. If the application relies on authentication tokens that are stored inside of a cookie, this attack is possible because the browser will automatically include this cookie with every request.</span><span>Make sure to use the built-in anti-forgery token support of ASP.NET MVC Core. By default the ASP.NET MVC FormHelper will inject a token in each of the used Views. Each Controller HTTP POST action method needs to be annotated with [ValidateForgeryToken] or use [AutoValidateAntiforgeryToken] annotation on the Controller class. It's also possible to apply AutoValidateForgeryTokenAttribute as a filter in the MVC pipeline which will remove the need for each method being annotated separately. This uses a Synchronizer Token Pattern (STP) that will add the nonce (unique and unpredictable) to each request that can be verified on the server side and unable for an attacker to predict.</span><span>References: <a href=\"https://cwe.mitre.org/data/definitions/352.html\">CWE</a><a href=\"https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery\">Prevent Cross-Site Request Forgery (XSRF/CSRF) attacks in ASP.NET Core</a><a href=\"https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.md\">OWASP</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 352, "name": "Cross-Site Request Forgery (CSRF)", "href": "https://api.veracode.com/appsec/v1/cwes/352"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/controllers/accountcontroller.cs", "file_name": "accountcontroller.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 0, "finding_category": {"id": 11, "name": "Authentication Issues", "href": "https://api.veracode.com/appsec/v1/categories/11"}, "procedure": "verademonet_dll.VeraDemoNet.Controllers.AccountController.PostRegisterFinish", "exploitability": 0, "attack_vector": "PostRegisterFinish", "file_line_number": 486}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-16 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:34:32.025Z", "user_name": "Aaron Butler"}, {"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VERD-104 has been opened for this flaw.", "action": "COMMENT", "created": "2022-08-11T14:11:00.161Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 21, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/removeaccountcommand.cs", "file_name": "removeaccountcommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 42, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.RemoveAccountCommand.Execute", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 26}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-31 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:11.843Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 57, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/removeaccountcommand.cs", "file_name": "removeaccountcommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 75, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.RemoveAccountCommand.Execute", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 33}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-32 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:14.998Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 48, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/removeaccountcommand.cs", "file_name": "removeaccountcommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 92, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.RemoveAccountCommand.Execute", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 38}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-33 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:17.463Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 36, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable eventQuery. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteReader.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/listencommand.cs", "file_name": "listencommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 90, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.ListenCommand.Execute", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 53}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-30 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:09.275Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 24, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, and verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/ignorecommand.cs", "file_name": "ignorecommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 51, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.IgnoreCommand.Execute", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 31}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-28 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:03.873Z", "user_name": "Aaron Butler"}], "build_id": 27722772}, {"issue_id": 54, "scan_type": "STATIC", "description": "<span>This call to log4net_dll.log4net.ILog.Info() could result in a log forging attack.  Writing untrusted data into a log file allows an attacker to forge log entries or inject malicious content into log files.  Corrupted log files can be used to cover an attacker's tracks or as a delivery mechanism for an attack on a log viewing or processing utility.  For example, if a web administrator uses a browser-based utility to review logs, a cross-site scripting attack might be possible. The first argument to Info() contains tainted data from the variable sqlQuery. The tainted data originated from earlier calls to app_web__layout_cshtml_639c3968_dll.VirtualController.vc_mvcentry, verademonet_dll.VeraDemoNet.Controllers.BlabController.PostBlabbers, and system_data_dll.System.Data.Common.DbCommand.ExecuteScalar.</span> <span>Avoid directly embedding user input in log files when possible.  Sanitize untrusted data used to construct log entries by using a safe logging mechanism such as the OWASP ESAPI Logger, which will automatically remove unexpected carriage returns and line feeds and can be configured to use HTML entity encoding for non-alphanumeric data.  Alternatively, some of the XSS escaping functions from the OWASP Java Encoder project will also sanitize CRLF sequences.  Only create a custom blocklist when absolutely necessary.  Always validate untrusted input to ensure that it conforms to the expected format, using centralized data validation routines when possible.</span> <span>References: <a href=\"https://cwe.mitre.org/data/definitions/117.html\">CWE</a> <a href=\"https://owasp.org/www-community/attacks/Log_Injection\">OWASP</a> <a href=\"https://docs.veracode.com/r/review_cleansers?tocId=nYnZqAenFFZmB75MQrZwuA\">Supported Cleansers</a></span>", "count": 1, "context_type": "APPLICATION", "context_guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "violates_policy": true, "finding_status": {"first_found_date": "2022-03-30T15:54:17.810Z", "status": "OPEN", "resolution": "UNRESOLVED", "mitigation_review_status": "NONE", "new": false, "resolution_status": "NONE", "last_seen_date": "2023-07-24T19:01:27.673Z"}, "finding_details": {"severity": 3, "cwe": {"id": 117, "name": "Improper Output Neutralization for Logs", "href": "https://api.veracode.com/appsec/v1/cwes/117"}, "file_path": "git/ct_verademo.net/verademo.net/verademonet/commands/ignorecommand.cs", "file_name": "ignorecommand.cs", "module": "app_web__layout.cshtml.639c3968.dll/verademonet.dll", "relative_location": 95, "finding_category": {"id": 21, "name": "CRLF Injection", "href": "https://api.veracode.com/appsec/v1/categories/21"}, "procedure": "verademonet_dll.VeraDemoNet.Commands.IgnoreCommand.Execute", "exploitability": 1, "attack_vector": "log4net_dll.log4net.ILog.Info", "file_line_number": 40}, "annotations": [{"comment": "[Added by Veracode Integration for JIRA] JIRA Issue VRNET-29 has been opened for this flaw.", "action": "COMMENT", "created": "2023-07-24T18:35:06.613Z", "user_name": "Aaron Butler"}], "build_id": 27722772}], "asset_info": {"guid": "e88f93c6-afb9-44e4-a002-a4df820d73f7", "type": "APPLICATION", "name": "Verademo.NET", "attributes": {"app_url": "HomeAppProfile:90250:1394124", "team_accessible": true, "teams": [{"team_id": 256469, "team_name": "Backend Team", "guid": "0102931e-4d9b-4ac5-a5cd-4de16ffcab9a"}], "scans": [{"status": "PUBLISHED", "modified_date": "2023-07-24T19:01:28.000Z", "scan_url": "StaticOverview:90250:1394124:27722772:27693572:27709222", "scan_type": "STATIC"}, {"status": "PUBLISHED", "modified_date": "2022-12-07T21:35:04.000Z", "scan_url": "DynamicParamsView:90250:1394124:22619331:22590622::22606272", "scan_type": "DYNAMIC"}], "created": "2022-03-29T16:55:35.000Z", "policy_in_grace_period": false, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2023-07-24T19:01:28.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}}, "7d954dc6-fbc3-43da-8572-31c9dc5c0b98": {"summary_info": {"sev5": 0, "sev4": 0, "sev3": 0, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [], "asset_info": {"guid": "7d954dc6-fbc3-43da-8572-31c9dc5c0b98", "type": "APPLICATION", "name": "Vulnerable_Tornado_App", "attributes": {"app_url": "HomeAppProfile:90250:1414756", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-04-19T17:52:18.000Z", "scan_url": "StaticOverview:90250:1414756:17952623:17924826:17940476", "scan_type": "STATIC"}], "created": "2022-04-19T17:28:29.000Z", "policy_in_grace_period": true, "policy_passed_rules": true, "policies": [{"guid": "9f47093a-0493-4ab4-bce4-3246eb2ab50f", "name": "Veracode Recommended Medium + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-04-19T17:52:18.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}}, "df376eb3-a039-40db-8d24-1c11da1bfd42": {"summary_info": {"sev5": 0, "sev4": 0, "sev3": 0, "sev2": 0, "sev1": 0, "sev0": 0}, "app_findings": [], "asset_info": {"guid": "df376eb3-a039-40db-8d24-1c11da1bfd42", "type": "APPLICATION", "name": "OpenSSL", "attributes": {"app_url": "HomeAppProfile:90250:1509220", "team_accessible": true, "teams": [], "scans": [{"status": "PUBLISHED", "modified_date": "2022-08-16T17:49:49.000Z", "scan_url": "StaticOverview:90250:1509220:20235769:20207605:20223255", "scan_type": "STATIC"}], "created": "2022-08-16T13:14:48.000Z", "policy_in_grace_period": true, "policy_passed_rules": false, "policies": [{"guid": "61800e31-f076-4def-83b4-89f2f1fb15d0", "name": "Veracode Recommended Very High + SCA", "policy_compliance_status": "DID_NOT_PASS"}], "last_completed_scan_date": "2022-08-16T17:49:49.000Z", "policy_passed_scan_requirements": false, "is_ignored": false}}}, "collection_summary": {"sev5": 4, "sev4": 23, "sev3": 156, "sev2": 9, "sev1": 0, "sev0": 0}}}